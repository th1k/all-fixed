##Setup Apache2 Virtual Host (Domain Name) On Linux
 
##Introduction
The Apache web server is the most popular way of serving web content on the internet. It accounts for more than half of all active websites on the internet and is extremely powerful and flexible.
 
Apache breaks its functionality and components into individual units that can be customized and configured independently. The basic unit that describes an individual site or domain is called a virtual host.
 
These designations allow the administrator to use one server to host multiple domains or sites off of a single interface or IP by using a matching mechanism. This is relevant to anyone looking to host more than one site off of a single VPS.
 
Each domain that is configured will direct the visitor to a specific directory holding that site's information, never indicating that the same server is also responsible for other sites. This scheme is expandable without any software limit as long as your server can handle the load.
 
##Prerequisites
Before you begin this tutorial, you should create a non-root user for this setup
 
You will also need to have Apache installed in order to work through these steps. If you haven't already done so, you can get Apache installed on your server through apt-get:
 
	sudo apt-get update
	sudo apt-get install apache2
 
After these steps are complete, we can get started.
 
For the purposes of this guide, our configuration will make a virtual host for example.com.
 
##Step One — Create the Directory Structure
The first step that we are going to take is to make a directory structure that will hold the site data that we will be serving to visitors.
 
Our document root (the top-level directory that Apache looks at to find content to server) will be set to individual directories under the /var/www/html directory. We will create a directory here for the virtual hosts we plan on making.
 
Within each of these directories, we will create a public_html folder that will hold our actual files. This gives us some flexibility in our hosting.
 
For instance, for our sites, we're going to make our directories like this:
 
	sudo mkdir -p /var/www/example.com/public_html
 
##Step Two — Grant Permissions
Now we have the directory structure for our files, but they are owned by our root user. If we want our regular user to be able to modify files in our web directories, we can change the ownership by doing this:
 
	sudo chown -R $USER:$USER /var/www/example.com/public_html
 
The $USER variable will take the value of the user you are currently logged in as when you press Enter. By doing this, our regular user now owns the public_html subdirectories where we will be storing our content.
 
We should also modify our permissions a little bit to ensure that read access is permitted to the general web directory and all of the files and folders it contains so that pages can be served correctly:
 
	sudo chmod -R 755 /var/www
 
Your web server should now have the permissions it needs to serve content, and your user should be able to create content within the necessary folders.
 
##Step Three — Create New Virtual Host Files
Virtual host files are the files that specify the actual configuration of our virtual hosts and dictate how the Apache web server will respond to various domain requests.
 
Apache comes with a default virtual host file called 000-default.conf that we can use as a jumping off point. We are going to copy it over to create a virtual host file for each of our domains.
 
We will start with one domain, configure it, copy it for our second domain, and then make the few further adjustments needed. The default Ubuntu configuration requires that each virtual host file end in .conf.
 
##Create the First Virtual Host File
Start by copying the file for the first domain:
 
	sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf
 
Open it with text editor
 
The file will look something like this (I've removed the comments here to make the file more approachable):
 
	<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
	</VirtualHost>
 
As you can see, there's not much here. We will customize the items here for our first domain and add some additional directives. This virtual host section matches any requests that are made on port 80, the default HTTP port.
 
First, we need to change the ServerAdmin directive to an email that the site administrator can receive emails through.
 
	ServerAdmin admin@example.com
 
After this, we need to add two directives. The first, called ServerName, establishes the base domain that should match for this virtual host definition. This will most likely be your domain. The second, called ServerAlias, defines further names that should match as if they were the base name. This is useful for matching hosts you defined, like www:
 
	ServerName example.com
	ServerAlias www.example.com
 
The only other thing we need to change for a basic virtual host file is the location of the document root for this domain. We already created the directory we need, so we just need to alter the DocumentRoot directive to reflect the directory we created:
 
	DocumentRoot /var/www/example.com/public_html
 
In total, our virtualhost file should look like this:
 
	<VirtualHost *:80>
	    ServerAdmin admin@example.com
	    ServerName example.com
	    ServerAlias www.example.com
	    DocumentRoot /var/www/example.com/public_html
	    ErrorLog ${APACHE_LOG_DIR}/error.log
	    CustomLog ${APACHE_LOG_DIR}/access.log combined
	</VirtualHost>
 
Save and close the file.
 
##Step Four — Enable the New Virtual Host Files
Now that we have created our virtual host files, we must enable them. Apache includes some tools that allow us to do this.
 
We can use the a2dissite tool to disable default apache2 conf file
 
	sudo a2dissite 000-default.conf
 
And then we enable our example.com.conf file
 
	sudo a2ensite example.com.conf
 
When you are finished, you need to restart Apache to make these changes take effect:
 
	sudo systemctl restart apache2
 
In other documentation, you may also see an example using the service command:
 
	sudo service apache2 restart
 
##Step Five — Set Up Local Hosts File (Optional)
 
If you haven't been using actual domain names that you own to test this procedure and have been using some example domains instead, you can at least test the functionality of this process by temporarily modifying the hosts file on your local computer.
 
This will intercept any requests for the domains that you configured and point them to your VPS server, just as the DNS system would do if you were using registered domains. This will only work from your computer though, and is simply useful for testing purposes.
 
Make sure you are operating on your local computer for these steps and not your VPS server. You will need to know the computer's administrative password or otherwise be a member of the administrative group.
 
If you are on a Mac or Linux computer, edit your local file with administrative privileges by typing:
 
	sudo leafpad /etc/hosts
 
If you are on a Windows machine, you can find instructions on altering your hosts file here.
 
The details that you need to add are the public IP address of your VPS server followed by the domain you want to use to reach that VPS.
 
For the domains that I used in this guide, assuming that my VPS IP address is 192.168.43.110 (my local ipaddress), I could add the following lines to the bottom of my hosts file:
 
	127.0.0.1   localhost
	127.0.1.1   guest-desktop
	192.168.43.110 example.com
 
This will direct any requests for example.com on our computer and send them to our server at 192.168.43.110. This is what we want if we are not actually the owners of these domains in order to test our virtual hosts.
 
Save and close the file.
 
Now that you have your own virtual host configured, you can test it by type example.com on your browser, it should working.
 
#Source
https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-16-04
https://www.youtube.com/watch?v=3bdt9u8omUE